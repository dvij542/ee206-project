from .ball_detection_utils import detect_ball_contours
from .BallDetector import BallDetector

import cv2

# Wrapper for ball_detection_funcs, keeps memory of previous ball positions and uses them in consecutive calls
# This class corresponds to the detect_ball_contours algorithm.
class HistoryBallDetector(BallDetector):
    def __init__(self, camera = -1, max_dist = 120, func = detect_ball_contours):
        self.center = (720, 540)
        self.front = None
        self.radius = None
        self.max_dist = 1000
        self.default_max_dist = max_dist
        self.camera = camera
        self.ball_found = False
        self.func = func
    def next_position(self, frame, show_images = False):
        if self.front:
            smart_center = (int(self.center[0] + 1.4 * (self.front[0] - self.center[0])), 
                            int(self.center[1] + 1.4 * (self.front[1] - self.center[1])))
        if show_images:
            if self.front:
                cv2.circle(frame, smart_center, int(self.max_dist), (255, 0, 0), 2)
            elif self.center:
                cv2.circle(frame, self.center, int(self.max_dist), (255, 0, 0), 2)
        #new_center, new_radius = detect_ball_contours(frame, self.center, self.max_dist, show_images)
        if self.front:
            new_center, new_radius, front, front_rad = self.func(frame, smart_center, self.max_dist, show_images, find_front=True)
        else:
            new_center, new_radius, front, front_rad = self.func(frame, self.center, self.max_dist, show_images, find_front=True)
        if new_center:
            self.center = new_center
            self.radius = new_radius
            self.max_dist = self.default_max_dist
            self.ball_found = True
        else:
            self.ball_found = False
            self.max_dist += self.default_max_dist
        
        if show_images:
            if self.center and self.ball_found:
                if (self.max_dist < 4 * self.default_max_dist):
                    cv2.circle(frame, self.center, int(self.radius), (0, 0, 255), 2)
            if front is not None:
                self.front = front
                cv2.circle(frame, front, front_rad, (0, 0, 100), 2)
            cv2.imshow(f"Frame{self.camera}", frame)
        if self.ball_found:
            return self.center, self.radius
        else:
            return None, None