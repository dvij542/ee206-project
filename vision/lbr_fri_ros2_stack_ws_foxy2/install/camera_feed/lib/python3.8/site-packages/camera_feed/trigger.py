import rclpy
from rclpy.node import Node
from std_msgs.msg import Int32  # Use Int32 for integer messages
import signal

exit_flag = False
def signal_handler(sig, frame):
    global exit_flag
    exit_flag = True

class TriggerPublisherNode(Node):
    def __init__(self):
        super().__init__('trigger_node')
        self.publisher = self.create_publisher(Int32, 'trigger', 10)  # Replace 'your_topic_name'

        timer_period = 1.0 / 100.0  # 100Hz publishing frequency
        self.timer = self.create_timer(timer_period, self.timer_callback)
        self.counter = 0

    def timer_callback(self):
        # Check the exit_flag to end the loop gracefully
        global exit_flag
        if exit_flag:
            self.get_logger().info('Exiting loop...')
            return

        msg = Int32()
        msg.data = self.counter  # Publish the current value of the counter as an integer
        self.publisher.publish(msg)
        self.get_logger().info('Publishing: %d' % msg.data)
        self.counter += 1

def main(args=None):
    rclpy.init(args=args)
    node = TriggerPublisherNode()
    signal.signal(signal.SIGINT, signal_handler)  # Set up the signal handler for Ctrl+C

    while rclpy.ok() and not exit_flag:
        rclpy.spin_once(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()