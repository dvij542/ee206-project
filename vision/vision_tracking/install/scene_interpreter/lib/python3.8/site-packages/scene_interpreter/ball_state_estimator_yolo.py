import cv2
from ultralytics import YOLO
from .triangulation_utils import triangulate

def estimate_ball_3D_spatial_coords(model_path):
    # Initialize the YOLO model with the given path
    model = YOLO(model_path)

    def process_frame_with_yolo(frame, camera_label):
        print(f"Processing frame from {camera_label} with YOLO...")
    
        # Use the YOLO model to detect objects in the frame
        results = model(frame, conf=0.05, iou=0.4, verbose=False)
    
        if not results or len(results) == 0 or results[0].boxes is None or len(results[0].boxes) == 0:
            print(f"No detections found in the frame from {camera_label}.")
            return frame, None

        # Annotate the frame with detections
        best_detection = max(results[0].boxes, key=lambda box: box.conf.cpu().item())
        x, y, w, h = best_detection.xywh.cpu()[0]
        cv2.rectangle(frame,
                      (int(x - w / 2), int(y - h / 2)),
                      (int(x + w / 2), int(y + h / 2)),
                      (0, 255, 0), 2)
        cv2.putText(frame,
                    f"Ball: ({x:.2f}, {y:.2f})",
                    (int(x - w / 2), int(y - h / 2) - 10),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0), 2)

        print(f"Detection - x: {x}, y: {y}")
        return frame, (int(x), int(y))

    def helper(*frames, display_annotated):
        print("Starting helper function for triangulation...")
        centers = []

        for i, frame in enumerate(frames):
            annotated_frame, center = process_frame_with_yolo(frame, f"Camera {i}")
            centers.append(center)

            # Show annotated frames only if user opts to display them
            if display_annotated:
                cv2.imshow(f"Annotated Frame - Camera {i}", annotated_frame)
        
        # Check that the ball has been detected by what cameras
        valid_centers = [center for center in centers if center is not None]

        # say that at least 2 cameras need to have detected ball to work 
        if len(valid_centers) < 2:
            print("Triangulation failed: Not enough valid detections for triangulation.")
            return None, float('inf')


        print("Performing triangulation...")
        ball_spatial_coords, error = triangulate(centers)
        print("Triangulation result:", ball_spatial_coords, "Error:", error)
        return ball_spatial_coords, error

    return helper


# Initialize the triangulation helper function with the specified YOLO model path
estimate_ball_3D_spatial_coords = estimate_ball_3D_spatial_coords(
    model_path="/home/dvij/ee206-project/ping-pong-robot/ppr_ws/src/camera_feed/camera_feed/runs/detect/train4/weights/best.pt"
)
