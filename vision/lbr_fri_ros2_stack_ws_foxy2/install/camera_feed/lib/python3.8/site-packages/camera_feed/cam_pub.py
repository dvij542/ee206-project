import rclpy # Python Client Library for ROS 2
from rclpy.node import Node # Handles the creation of nodes
from std_msgs.msg import Header
from sensor_msgs.msg import Image # Image is the message type
from cv_bridge import CvBridge # Package to convert between ROS and OpenCV Images
import cv2 # OpenCV library
import numpy as np
import time

import cv2
import numpy as np

import gi
gi.require_version ('Aravis', '0.8')
from gi.repository import Aravis

def wait_until_next_start_point(start_point = 2):
    # starts on the 10 second mark (1:00:00, 1:00:10, 1:00:20)
    current_time = time.time()
    next_start_time = (current_time // start_point + 1) * start_point
    time.sleep(next_start_time - current_time)

def initialize_camera(cam_id, exposure_time):
    cam = Aravis.Camera.new(cam_id)
    cam.set_string('AcquisitionFrameRateMode', 'On')
    cam.set_string('BalanceWhiteAuto', 'Continuous')
    cam.set_exposure_time(exposure_time)
    device = cam.get_device()
    device.set_string_feature_value("AcquisitionMode", "Continuous")
    payload = cam.get_payload()
    stream = cam.create_stream(None, None)
    for _ in range(0,20):
        stream.push_buffer(Aravis.Buffer.new_allocate(payload))
    [_,_,width,height] = cam.get_region()
    return cam, stream, width, height

class ImagePublisher(Node):
    def __init__(self):
        super().__init__(f'camera_publisher')

        self.declare_parameter('cam_num', 1)
        cam_num = self.get_parameter('cam_num').get_parameter_value().integer_value
        self.publisher_ = self.create_publisher(Image, f'cam_{cam_num}', 1000)
        
        # Used to convert between ROS and OpenCV images
        self.br = CvBridge()

        EXPOSURE_TIME = (1/150) * 10**6

        # map camera id to camera number
        cameras = {
            "Daheng Imaging-2BA200003814-FDN21120585": 1,
            "Daheng Imaging-2BA200003827-FDN21120598": 2,
            "Daheng Imaging-2BA200003813-FDN21120584": 3,
            "Daheng Imaging-2BA200003815-FDN21120586": 4,
        }

        # find the id corresponding to cam_num
        id = None
        for key, value in cameras.items():
            if value == cam_num:
                id = key
        assert id is not None
        self.get_logger().info('Found id')

        # set up camera object
        Aravis.enable_interface("Fake")
        cam, stream, width, height = initialize_camera(id, EXPOSURE_TIME)

        wait_until_next_start_point()
        self.get_logger().info("Start acquisition")

        cam.start_acquisition()
        start_time = time.time()
        cam_num = cameras[id]
        
        FPS = 120

        count = 0
        start = time.time()
        while True:          
            start = time.time()

            image = stream.pop_buffer()        
            if image:
                data_from_buffer = image.get_data()
                if len(data_from_buffer) > 0:                    
                    image_rgb = cv2.cvtColor(np.frombuffer(data_from_buffer, dtype=np.uint8).reshape((height, width)), cv2.COLOR_BAYER_BG2BGR)
                    stream.push_buffer(image)

                    img = self.br.cv2_to_imgmsg(image_rgb)
                    img.header = Header()
                    img.header.stamp = self.get_clock().now().to_msg()
                    self.publisher_.publish(img) 
                    self.get_logger().info('Publishing frame')

            while (time.time() - start < (1 / FPS)):
                pass

        cam.stop_acquisition()

        self.get_logger().info("Stop acquisition")
  
def main(args=None):
    # Initialize the rclpy library
    rclpy.init(args=args)
    image_publisher = ImagePublisher()
    rclpy.spin(image_publisher)
    image_publisher.destroy_node()
    rclpy.shutdown()
  
if __name__ == '__main__':
    main()