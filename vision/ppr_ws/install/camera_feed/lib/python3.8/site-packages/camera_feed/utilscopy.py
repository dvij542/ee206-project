#!/usr/bin/env python
import cv2 as cv
import numpy as np

def calibrate_camera(images_names, show_checkerboard=False):
    images = []
    print("[DEBUG] Loading images...")
    for imname in images_names:
        im = cv.imread(imname, 1)
        if im is None:
            print(f"[WARNING] Unable to read image: {imname}")
        else:
            images.append(im)
    print(f"[DEBUG] Loaded {len(images)} images.")

    # Criteria for corner refinement
    criteria = (cv.TERM_CRITERIA_EPS + cv.TERM_CRITERIA_MAX_ITER, 100, 0.0001)

    rows = 6  # Checkerboard rows.
    columns = 7  # Checkerboard columns.
    world_scaling = 5.9  # Real world square size in cm.

    # 3D points in real-world space
    objp = np.zeros((rows * columns, 3), np.float32)
    objp[:, :2] = np.mgrid[0:rows, 0:columns].T.reshape(-1, 2)
    objp *= world_scaling
    print("[DEBUG] 3D object points initialized.")

    # Frame dimensions
    if len(images) == 0:
        raise ValueError("No valid images loaded for calibration.")
    width = images[0].shape[1]
    height = images[0].shape[0]
    print(f"[DEBUG] Image dimensions: {width}x{height}")

    # 2D points in image plane
    imgpoints = []
    objpoints = []

    def detect_checkerboard(image, checkerboard_size=(7, 8), adaptive_thresh=True, normalize=True):
        """
        Detect checkerboard with multiple preprocessing techniques.
        """
        print("[DEBUG] Detecting checkerboard...")
        try:
            if len(image.shape) == 3:
                gray = cv.cvtColor(image, cv.COLOR_BGR2GRAY)
                print("[DEBUG] Converted image to grayscale.")
            else:
                gray = image.copy()
                print("[DEBUG] Image is already grayscale.")

            if normalize:
                gray = cv.equalizeHist(gray)
                print("[DEBUG] Histogram equalization applied.")

            blurred = cv.GaussianBlur(gray, (5, 5), 0)
            print("[DEBUG] Gaussian blur applied.")

            detection_strategies = [
                (cv.findChessboardCorners, (blurred, checkerboard_size, cv.CALIB_CB_ADAPTIVE_THRESH | cv.CALIB_CB_NORMALIZE_IMAGE)),
                (cv.findChessboardCorners, (blurred, checkerboard_size, cv.CALIB_CB_FAST_CHECK)),
                (cv.findChessboardCorners, (cv.Canny(blurred, 100, 200), checkerboard_size, cv.CALIB_CB_ADAPTIVE_THRESH | cv.CALIB_CB_NORMALIZE_IMAGE))
            ]

            for idx, (finder, args) in enumerate(detection_strategies):
                print(f"[DEBUG] Trying detection strategy {idx + 1}...")
                ret, corners = finder(*args)
                print(f"[DEBUG] Detection strategy {idx + 1} {'succeeded' if ret else 'failed'}.")
                if ret:
                    refined_corners = cv.cornerSubPix(gray, corners, (11, 11), (-1, -1), criteria)
                    print("[DEBUG] Corners refined successfully.")
                    return True, refined_corners, gray
        except Exception as e:
            print(f"[ERROR] Checkerboard detection failed: {e}")

        return False, None, None

    print("[DEBUG] Starting checkerboard detection for all images...")
    for i, frame in enumerate(images):
        print(f"[DEBUG] Processing image {i + 1}/{len(images)}...")
        success, corners, processed_image = detect_checkerboard(frame, checkerboard_size=(rows, columns))
        if success:
            print(f"[DEBUG] Checkerboard detected in image {i + 1}.")
            if show_checkerboard:
                cv.drawChessboardCorners(frame, (rows, columns), corners, True)
                cv.imshow('Checkerboard', frame)
                cv.waitKey(0)
            objpoints.append(objp)
            imgpoints.append(corners)
        else:
            print(f"[WARNING] No checkerboard detected in image {i + 1}. Skipping.")

    cv.destroyAllWindows()
    if len(objpoints) == 0 or len(imgpoints) == 0:
        raise ValueError("No checkerboards detected in any images.")

    print("[DEBUG] Running camera calibration...")
    ret, mtx, dist, rvecs, tvecs = cv.calibrateCamera(objpoints, imgpoints, (width, height), None, None)
    print("[DEBUG] Camera calibration completed.")

    # Calculate reprojection error
    total_error = 0
    for i in range(len(objpoints)):
        imgpoints2, _ = cv.projectPoints(objpoints[i], rvecs[i], tvecs[i], mtx, dist)
        error = cv.norm(imgpoints[i], imgpoints2, cv.NORM_L2) / len(imgpoints2)
        total_error += error

    avg_reproj_error = total_error / len(objpoints)
    print(f"[DEBUG] Average reprojection error: {avg_reproj_error}")

    return mtx, dist, rvecs, tvecs, avg_reproj_error




def stereo_calibrate(mtx1, dist1, mtx2, dist2, c1_names, c2_names):
    # read the synched frames
    # c1_names = sorted(glob.glob(camera1_folder))
    # c2_names = sorted(glob.glob(camera2_folder))

    c1_images = [cv.imread(c1_name, 1) for c1_name in c1_names]
    c2_images = [cv.imread(c2_name, 1) for c2_name in c2_names]

    # change this if stereo calibration not good.
    criteria = (cv.TERM_CRITERIA_EPS + cv.TERM_CRITERIA_MAX_ITER, 100, 0.0001)

    rows = 6  # number of checkerboard rows.
    columns = 7  # number of checkerboard columns.
    world_scaling = 5  # change this to the real world square size. (cm)

    # coordinates of squares in the checkerboard world space
    objp = np.zeros((rows*columns, 3), np.float32)
    objp[:, :2] = np.mgrid[0:rows, 0:columns].T.reshape(-1, 2)
    objp = world_scaling*objp

    # frame dimensions. Frames should be the same size.
    width = c1_images[0].shape[1]
    height = c1_images[0].shape[0]

    # Pixel coordinates of checkerboards
    imgpoints_left = []  # 2d points in image plane.
    imgpoints_right = []

    # coordinates of the checkerboard in checkerboard world space.
    objpoints = []  # 3d point in real world space

    for frame1, frame2 in zip(c1_images, c2_images):
        gray1 = cv.cvtColor(frame1, cv.COLOR_BGR2GRAY)
        gray2 = cv.cvtColor(frame2, cv.COLOR_BGR2GRAY)
        c_ret1, corners1 = cv.findChessboardCorners(
            gray1, (rows, columns), None)
        c_ret2, corners2 = cv.findChessboardCorners(
            gray2, (rows, columns), None)

        if c_ret1 == True and c_ret2 == True:
            corners1 = cv.cornerSubPix(
                gray1, corners1, (11, 11), (-1, -1), criteria)
            corners2 = cv.cornerSubPix(
                gray2, corners2, (11, 11), (-1, -1), criteria)

            objpoints.append(objp)
            imgpoints_left.append(corners1)
            imgpoints_right.append(corners2)

    stereocalibration_flags = cv.CALIB_FIX_INTRINSIC
    ret, CM1, dist1, CM2, dist2, R, T, E, F = cv.stereoCalibrate(objpoints, imgpoints_left, imgpoints_right, mtx1, dist1,
                                                                 mtx2, dist2, (width, height), criteria=criteria, flags=stereocalibration_flags)

    # print(ret)
    return R, T