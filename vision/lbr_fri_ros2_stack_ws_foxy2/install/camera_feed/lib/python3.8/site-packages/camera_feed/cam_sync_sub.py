import rclpy
import message_filters
from rclpy.node import Node

import cv2
from sensor_msgs.msg import Image
from ppr_interfaces.msg import Scene

class ImageSubscriber(Node):

    def __init__(self):
        super().__init__(f'camera_subscriber')

        tss = message_filters.ApproximateTimeSynchronizer(
            [message_filters.Subscriber(self, Image, f"cam_{i}") for i in range(1, 5)],
            10,
            1, # defines the delay (in seconds) with which messages can be synchronized
            ) # NOTE: this delay can cause us to publish at a very slow rate! if frames aren't synchronized
        tss.registerCallback(self.listener_callback)
        self.publisher_ = self.create_publisher(Scene, 'synchronized_cam_feed', 100) 
        self.get_logger().info('Initialized.')

    def listener_callback(self, *frames):
        scene = Scene()
        scene.frames = frames
        self.publisher_.publish(scene) 
        self.get_logger().info('Published.')

def main(args=None):
    rclpy.init(args=args)
    image_subscriber = ImageSubscriber()
    rclpy.spin(image_subscriber)
    image_subscriber.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
