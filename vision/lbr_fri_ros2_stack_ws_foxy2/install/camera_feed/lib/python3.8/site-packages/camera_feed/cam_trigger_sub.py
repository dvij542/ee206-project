"""Creates a videoWriter for one camera. Takes a photo with each trigger signal."""

import rclpy
from rclpy.node import Node
from std_msgs.msg import Int32
import cv2
import time
import numpy as np
import signal
import os

import gi
gi.require_version ('Aravis', '0.8')
from gi.repository import Aravis

exit_flag = False
def signal_handler(sig, frame):
    global exit_flag
    exit_flag = True

def wait_until_next_start_point(start_point = 2):
    # starts on the 10 second mark (1:00:00, 1:00:10, 1:00:20)
    current_time = time.time()
    next_start_time = (current_time // start_point + 1) * start_point
    time.sleep(next_start_time - current_time)

    t = time.time()
    while (t - int(t)) > 0.0001:
        t = time.time()

def initialize_camera(cam_id, exposure_time):
    cam = Aravis.Camera.new(cam_id)
    cam.set_string('AcquisitionFrameRateMode', 'On')
    cam.set_string('BalanceWhiteAuto', 'Continuous')
    cam.set_exposure_time(exposure_time)
    device = cam.get_device()
    device.set_string_feature_value("AcquisitionMode", "Continuous")
    payload = cam.get_payload()
    stream = cam.create_stream(None, None)
    for _ in range(0,20):
        stream.push_buffer(Aravis.Buffer.new_allocate(payload))
    [_,_,width,height] = cam.get_region()
    return cam, stream, width, height

class CameraTriggerSubscriberNode(Node):
    def __init__(self):
        super().__init__('camera_trigger_subscriber_node')
        self.subscription = self.create_subscription(
            Int32, 
            'trigger',
            self.callback,
            10
        )

        self.declare_parameter('cam_num', 1)
        self.cam_num = self.get_parameter('cam_num').get_parameter_value().integer_value

        self.declare_parameter('folder', "test")
        folder = self.get_parameter('folder').get_parameter_value().string_value

        self.publisher = self.create_publisher(Int32, f'cam_{self.cam_num}', 10)

        EXPOSURE_TIME = (1/150) * 10**6
        camera_num_to_id = {
            1: "Daheng Imaging-2BA200003814-FDN21120585",
            2: "Daheng Imaging-2BA200003827-FDN21120598",
            3: "Daheng Imaging-2BA200003813-FDN21120584",
            4: "Daheng Imaging-2BA200003815-FDN21120586",
        }
        cam_id = camera_num_to_id[self.cam_num]
        self.cam, self.stream, self.width, self.height = initialize_camera(cam_id, EXPOSURE_TIME)

        base_path = f"/home/pingpongproject/code/ping-pong-robot/ppr_ws/src/camera_feed/camera_feed/data/{folder}"
        if not os.path.isdir(base_path):
            os.makedirs(base_path)

        self.out = cv2.VideoWriter(
            f"{base_path}/camera_{self.cam_num}.avi", 
            cv2.VideoWriter_fourcc(*'DIVX'), 
            100, # fps
            (int(self.width),int(self.height)))

        wait_until_next_start_point(4)
        self.has_started_acquisition = False
        

        timer_period = 1.0 / 2  # 100Hz publishing frequency
        self.timer = self.create_timer(timer_period, self.check_for_end_callback)

    def callback(self, msg):
        if not self.has_started_acquisition:
            self.cam.start_acquisition()
            self.has_started_acquisition = True
            self.get_logger().info(f"{self.cam_num} start acquisition {time.time()}")

        image = self.stream.pop_buffer()     
        # if image:
        #     data_from_buffer = image.get_data()
        #     image_rgb = cv2.cvtColor(np.frombuffer(data_from_buffer, dtype=np.uint8).reshape((self.height, self.width)), cv2.COLOR_BAYER_BG2BGR)
        #     self.out.write(image_rgb)
        #     self.stream.push_buffer(image)

        data_from_buffer = image.get_data()
        image_rgb = cv2.cvtColor(np.frombuffer(data_from_buffer, dtype=np.uint8).reshape((self.height, self.width)), cv2.COLOR_BAYER_BG2BGR)
        self.out.write(image_rgb)
        self.stream.push_buffer(image)

        self.get_logger().info('Received: %d' % msg.data)
        msg = Int32()
        msg.data = 0
        self.publisher.publish(msg)

        # Check the exit_flag to end the loop gracefully
        global exit_flag
        if exit_flag:
            self.get_logger().info('Exiting loop...')
            return

    def check_for_end_callback(self):
        # Check the exit_flag to end the loop gracefully
        global exit_flag
        if exit_flag:
            self.get_logger().info('Exiting loop...')
            return

def main(args=None):
    # TODO: CHECK IF VIDEO FILE ALREADY EXISTS

    rclpy.init(args=args)
    node = CameraTriggerSubscriberNode()
    signal.signal(signal.SIGINT, signal_handler)  # Set up the signal handler for Ctrl+C

    while rclpy.ok() and not exit_flag:
        rclpy.spin_once(node)

    # Stop acquisition and release resources
    node.cam.stop_acquisition()
    node.out.release()
    node.destroy_node()
    rclpy.shutdown()



if __name__ == '__main__':
    main()