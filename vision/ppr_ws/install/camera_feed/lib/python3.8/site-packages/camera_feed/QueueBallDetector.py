from .ball_detection_utils import detect_ball_in_motion_memory
from .BallDetector import BallDetector

import cv2
import queue

# detector class that implements memory as a mutable queue. Work in progress for now.
# This class corresponds to the detect_ball_in_motion_memory algorithm.
class QueueBallDetector(BallDetector):
    def __init__(self, camera = -1, max_dist = 120):
        self.center = (720, 540)
        self.camera = camera
        self.max_dist = max_dist
        self.search_dist = max_dist
        self.curr_center = None
        self.cache = queue.Queue(5)

    def next_position(self, frame, show_images = False):
        if self.curr_center and show_images:
            cv2.circle(frame, self.curr_center, int(self.max_dist), (255, 0, 0), 2)
        
        new_center, new_radius = detect_ball_in_motion_memory(frame, self.cache, self.max_dist)
        
        if new_center:
            self.curr_center = new_center
            self.radius = new_radius
            self.max_dist = self.search_dist
        else:
            self.max_dist += self.search_dist
        
        if show_images:
            if self.curr_center:
                if (self.max_dist < 4 * self.default_max_dist):
                    cv2.circle(frame, self.curr_center, int(self.radius), (0, 0, 255), 2)
            cv2.imshow(f"Frame{self.camera}", frame)
        
        if new_center and new_radius > 7:
            return new_center, new_radius

        return None, None