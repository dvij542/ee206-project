import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Point
from interface.msg import Scene
from control_msgs.msg import JointTrajectoryControllerState
from trajectory_msgs.msg import JointTrajectory
from .mujoco_env_kuka_with_table import KukaTennisEnv
import numpy as np

class MujocoSimNode(Node):
    def __init__(self):
        super().__init__('mujoco_sim_node')

        self.declare_parameter('rate', 60)
        self.rate = self.get_parameter('rate').value

        self.env = KukaTennisEnv(proc_id=1)
        self.env.reset()

        self.target_positions = np.zeros(7)

        # Publishers
        self.state_pub = self.create_publisher(JointTrajectoryControllerState, '/lbr/PositionJointInterface_trajectory_controller/state', 10)
        self.scene_pub = self.create_publisher(Scene, 'annotated_sync_scene', 10)

        # Subscribers
        self.create_subscription(JointTrajectory, '/lbr/PositionJointInterface_trajectory_controller/command', self.command_callback, 10)

        self.timer = self.create_timer(1.0 / self.rate, self.step)

    def joint_state_publish(self, joint_angles, joint_velocities, joint_names):
        msg = JointTrajectoryControllerState()
        msg.actual.positions = joint_angles.tolist()
        msg.actual.velocities = joint_velocities.tolist()
        msg.joint_names = joint_names
        self.state_pub.publish(msg)

    def restrict_range(self, val, min_val, max_val):
        return min(max(val, min_val), max_val)

    def command_callback(self, msg):
        self.target_positions = np.array(msg.points[0].positions[:7])
        self.target_positions[0] = self.restrict_range(self.target_positions[0], -2.96, 2.96)
        self.target_positions[1] = self.restrict_range(self.target_positions[1], -2.09, 2.09)
        self.target_positions[2] = self.restrict_range(self.target_positions[2], -2.94, 2.94)
        self.target_positions[3] = self.restrict_range(self.target_positions[3], -2.09, 2.09)
        self.target_positions[4] = self.restrict_range(self.target_positions[4], -2.94, 2.94)
        self.target_positions[5] = self.restrict_range(self.target_positions[5], -2.09, 2.09)
        self.target_positions[6] = self.restrict_range(self.target_positions[6], -3, 3)

    def step(self):
        current_positions = self.env.data.qpos[:7]
        current_velocities = self.env.data.qvel[:7]
        joint_names = ['lbr_iiwa_joint_1', 'lbr_iiwa_joint_2', 'lbr_iiwa_joint_3', 'lbr_iiwa_joint_4', 'lbr_iiwa_joint_5', 'lbr_iiwa_joint_6', 'lbr_iiwa_joint_7']
        self.joint_state_publish(current_positions, current_velocities, joint_names)

        ball_position = self.env.data.qpos[-7:-4]
        scene_msg = Scene()
        scene_msg.ball_spatial_coords = Point(
            x=ball_position[0],
            y=ball_position[1],
            z=ball_position[2]
        )
        self.scene_pub.publish(scene_msg)

        action = np.zeros(7)
        action = self.target_positions - current_positions
        _, _, done, _, _ = self.env.step(action)

        if done:
            self.env.reset()

        if self.get_parameter('rate').value:
            self.env.render()

def main(args=None):
    rclpy.init(args=args)
    node = MujocoSimNode()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()
